{"version":3,"sources":["LotteryBall.js","Lottery.js","App.js","serviceWorker.js","index.js"],"names":["LotteryBall","className","this","props","num","Component","Lottery","state","nums","Array","from","length","numBalls","handleClick","bind","setState","curState","map","n","Math","floor","random","maxNum","generate","title","onClick","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTASeA,G,6KAJX,OAAO,yBAAKC,UAAU,eAAeC,KAAKC,MAAMC,S,GAF1BC,c,OCCpBC,G,wDAMJ,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CACXC,KAAMC,MAAMC,KAAK,CAAEC,OAAQ,EAAKR,MAAMS,YAExC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,uDAOP,IAAD,OACTZ,KAAKa,UAAS,SAACC,GAAD,MAAe,CAC3BR,KAAMQ,EAASR,KAAKS,KAAI,SAACC,GAAD,OACtBC,KAAKC,MAAMD,KAAKE,SAAW,EAAKlB,MAAMmB,OAAS,Y,oCAKnDpB,KAAKqB,a,+BAGL,OACE,6BAAStB,UAAU,WACjB,4BAAKC,KAAKC,MAAMqB,OAChB,6BACGtB,KAAKK,MAAMC,KAAKS,KAAI,SAACC,GAAD,OACnB,kBAAC,EAAD,CAAad,IAAKc,QAGtB,4BAAQO,QAASvB,KAAKW,aAAtB,kB,GAhCcR,cAAhBC,EACGoB,aAAe,CACpBF,MAAO,QACPZ,SAAU,EACVU,OAAQ,IAkCGhB,QC5BAqB,MATf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASuB,MAAM,aAAaF,OAAQ,GAAIV,SAAU,MCGpCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f68ec976.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./LotteryBall.css\";\r\n\r\nclass LotteryBall extends Component {\r\n  render() {\r\n    return <div className=\"LotteryBall\">{this.props.num}</div>;\r\n  }\r\n}\r\n\r\nexport default LotteryBall;\r\n","import React, { Component } from \"react\";\r\nimport LotteryBall from \"./LotteryBall\";\r\nimport \"./Lottery.css\";\r\n\r\nclass Lottery extends Component {\r\n  static defaultProps = {\r\n    title: \"Lotto\",\r\n    numBalls: 6,\r\n    maxNum: 40,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nums: Array.from({ length: this.props.numBalls }),\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  generate() {\r\n    this.setState((curState) => ({\r\n      nums: curState.nums.map((n) =>\r\n        Math.floor(Math.random() * this.props.maxNum + 1)\r\n      ),\r\n    }));\r\n  }\r\n  handleClick() {\r\n    this.generate();\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"Lottery\">\r\n        <h1>{this.props.title}</h1>\r\n        <div>\r\n          {this.state.nums.map((n) => (\r\n            <LotteryBall num={n} />\r\n          ))}\r\n        </div>\r\n        <button onClick={this.handleClick}>Generate!</button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Lottery;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport LotteryBall from \"./LotteryBall\";\nimport Lottery from \"./Lottery\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Lottery />\n      <Lottery title=\"Mini-Daily\" maxNum={10} numBalls={4} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}